countries <- relevel(factor(climateSupport$countries, levels = c("20 of 192", "80 of 192", "160 of 192")))
# Convert 'countries' to a factor with levels in the desired order
countries <- relevel(factor(climateSupport$countries, ordered = FALSE, levels = c("20 of 192", "80 of 192", "160 of 192")))
# Convert 'countries' to a factor with levels in the desired order
countries <- relevel(factor(climateSupport$countries, ordered = FALSE, ref = "20 of 192"))#levels = c("20 of 192", "80 of 192", "160 of 192")))
# Convert 'countries' to a factor with levels in the desired order
countries <- relevel(factor(climateSupport$countries, ordered = FALSE), ref = "20 of 192")#levels = c("20 of 192", "80 of 192", "160 of 192")))
# Convert 'sanctions' to a factor with levels in the desired order
sanctions <- relevel(factor(climateSupport$sanctions, ordered = FALSE), ref = "None") #levels = c("None", "5%", "15%", "20% of the monthly household costs given 2% GDP growth"))
# Fit logistic regression model
model <- glm(choice ~ countries + sanctions, data = climateSupport, family = binomial(link = "logit"))
# Summary output
summary(model)
# Convert 'sanctions' to a factor with levels in the desired order
sanctions <- relevel(factor(climateSupport$sanctions, ordered = FALSE), ref = "5%") #levels = c("None", "5%", "15%", "20% of the monthly household costs given 2% GDP growth"))
# Fit logistic regression model
model <- glm(choice ~ countries + sanctions, data = climateSupport, family = binomial(link = "logit"))
# Summary output
summary(model)
# load data
load(url("https://github.com/ASDS-TCD/StatsII_Spring2024/blob/main/datasets/climateSupport.RData?raw=true"))
# Convert 'countries' to a factor with levels in the desired order
countries <- factor(climateSupport$countries, levels = c("20 of 192", "80 of 192", "160 of 192"))
# Convert 'sanctions' to a factor with levels in the desired order
sanctions <- factor(climateSupport$sanctions, levels = c("None", "5%", "15%", "20% of the monthly household costs given 2% GDP growth"))
# Fit logistic regression model
model <- glm(choice ~ countries + sanctions, data = climateSupport, family = binomial(link = "logit"))
# Summary output
summary(model)
# load data
load(url("https://github.com/ASDS-TCD/StatsII_Spring2024/blob/main/datasets/climateSupport.RData?raw=true"))
# Convert 'countries' to a factor with levels in the desired order
countries <- factor(climateSupport$countries, levels = c("20 of 192", "80 of 192", "160 of 192"))
# Convert 'sanctions' to a factor with levels in the desired order
sanctions <- factor(climateSupport$sanctions, levels = c("None", "5%", "15%", "20%")) #of the monthly household costs given 2% GDP growth"))
# Fit logistic regression model
model <- glm(choice ~ countries + sanctions, data = climateSupport, family = binomial(link = "logit"))
# Summary output
summary(model)
# load data
load(url("https://github.com/ASDS-TCD/StatsII_Spring2024/blob/main/datasets/climateSupport.RData?raw=true"))
# Convert 'sanctions' to a factor with levels in the desired order
#sanctions <- factor(climateSupport$sanctions, levels = c("None", "5%", "15%", "20%")) #of the monthly household costs given 2% GDP growth"))
# Change baseline category for the "countries" variable
climateSupport$countries <- relevel(climateSupport$countries, ref = "20 of 192")
# Convert 'countries' to a factor with levels in the desired order
countries <- factor(climateSupport$countries, levels = c("20 of 192", "80 of 192", "160 of 192"))
# Convert 'sanctions' to a factor with levels in the desired order
sanctions <- factor(climateSupport$sanctions, levels = c("None", "5%", "15%", "20%")) #of the monthly household costs given 2% GDP growth"))
# Change baseline category for the "countries" variable
climateSupport$countries <- relevel(climateSupport$countries, ref = "20 of 192")
# Change baseline category for the "countries" variable
climateSupport$countries <- relevel(climateSupport$countries, ordered = FALSE, ref = "20 of 192")
# Convert 'countries' to a factor with levels in the desired order
countries <- factor(climateSupport$countries, levels = c("20 of 192", "80 of 192", "160 of 192"), ordered = FALSE)
# Convert 'sanctions' to a factor with levels in the desired order
sanctions <- factor(climateSupport$sanctions, levels = c("None", "5%", "15%", "20%"), ordered = FALSE) #of the monthly household costs given 2% GDP growth"))
# Change baseline category for the "countries" variable
climateSupport$countries <- relevel(climateSupport$countries, ref = "20 of 192")
# load data
load(url("https://github.com/ASDS-TCD/StatsII_Spring2024/blob/main/datasets/climateSupport.RData?raw=true"))
# Summary output
#summary(model)
# Convert 'countries' to a factor with levels in the desired order
countries <- factor(climateSupport$countries, levels = c("20 of 192", "80 of 192", "160 of 192"))
# Change 'sanctions' to a factor with levels in the desired order
climateSupport$sanctions <- factor(climateSupport$sanctions, levels = c("None", "5%", "15%", "20%"))
# Change baseline category for the "countries" variable
climateSupport$countries <- relevel(climateSupport$countries, ref = "20 of 192")
# Change baseline category for the "sanctions" variable
climateSupport$sanctions <- relevel(climateSupport$sanctions, ref = "5%")
# Fit logistic regression model
model <- glm(choice ~ countries + sanctions, data = climateSupport, family = binomial(link = "logit"))
# load data
load(url("https://github.com/ASDS-TCD/StatsII_Spring2024/blob/main/datasets/climateSupport.RData?raw=true"))
# Summary output
#summary(model)
# Ensure 'countries' is an unordered factor
climateSupport$countries <- factor(climateSupport$countries, levels = c("20 of 192", "80 of 192", "160 of 192"), ordered = FALSE)
# Ensure 'sanctions' is an unordered factor
climateSupport$sanctions <- factor(climateSupport$sanctions, levels = c("None", "5%", "15%", "20%"), ordered = FALSE)
# Change baseline category for the "countries" variable
climateSupport$countries <- relevel(climateSupport$countries, ref = "20 of 192")
# Change baseline category for the "sanctions" variable
climateSupport$sanctions <- relevel(climateSupport$sanctions, ref = "5%")
# Fit logistic regression model
model <- glm(choice ~ countries + sanctions, data = climateSupport, family = binomial(link = "logit"))
# Summary output
summary(model)
# Summary output
#summary(model)
# Ensure 'countries' is an unordered factor
countries <- factor(climateSupport$countries, levels = c("20 of 192", "80 of 192", "160 of 192"), ordered = FALSE)
# Ensure 'sanctions' is an unordered factor
sanctions <- factor(climateSupport$sanctions, levels = c("None", "5%", "15%", "20%"), ordered = FALSE)
# Change baseline category for the "countries" variable
countries <- relevel(climateSupport$countries, ref = "20 of 192")
# Change baseline category for the "sanctions" variable
sanctions <- relevel(climateSupport$sanctions, ref = "5%")
# Fit logistic regression model
model <- glm(choice ~ countries + sanctions, data = climateSupport, family = binomial(link = "logit"))
# Summary output
summary(model)
# Summary output
#summary(model)
# Ensure 'countries' is an unordered factor
countries <- factor(climateSupport$countries, levels = c("20 of 192", "80 of 192", "160 of 192"), ordered = FALSE)
# Ensure 'sanctions' is an unordered factor
sanctions <- factor(climateSupport$sanctions, levels = c("None", "5%", "15%", "20%"), ordered = FALSE)
# Change baseline category for the "countries" variable
countries <- relevel(climateSupport$countries, ref = "20 of 192")
# Change baseline category for the "sanctions" variable
sanctions <- relevel(climateSupport$sanctions, ref = "None")
# Fit logistic regression model
model <- glm(choice ~ countries + sanctions, data = climateSupport, family = binomial(link = "logit"))
# Summary output
summary(model)
logit <- glm(choice~1, data = climateSupport, family = binomial(link = "logit"))
anova(logit, model, test = "LRT")
null_model <- glm(choice~1, data = climateSupport, family = binomial(link = "logit"))
anova(null_model, model, test = "LRT")
# Coefficients
intercept <- -0.08081
countries_80 <- 0.33636
sanctions_none <- -0.19186
# Calculate the log odds for the specific condition: 80 of 192 countries with no sanctions
log_odds <- intercept + countries_80*1 + sanctions_None*1
# Calculate the log odds for the specific condition: 80 of 192 countries with no sanctions
log_odds <- intercept + countries_80*1 + sanctions_none*1
# Convert log odds to probability
probability <- 1 / (1 + exp(-log_odds))
# Print the estimated probability
print(probability)
# Assuming climateSupport is your dataset
# Fit model with interaction term
model_interaction <- glm(choice ~ countries + sanctions + countries:sanctions,
data = climateSupport,
family = binomial(link = "logit"))
# Use ANOVA to compare the models
anova_result <- anova(model, model_interaction, test = "LRT")
anova_result
#2(a)
# Coefficient for sanctions at 15%
sanctions_15 <- -0.32510
# Calculate the odds ratio
odds_ratio_15 <- exp(beta_sanctions_15)
# Calculate the odds ratio
odds_ratio_15 <- exp(sanctions_15)
# Print the odds ratio
print(odds_ratio_15)
# 2(b)
# Coefficients from our model
intercept <- -0.08081
countries_80 <- 0.33636
sanctions_none <- -0.19186
# Calculate the log odds for the specific condition: 80 of 192 countries with no sanctions
log_odds <- intercept + countries_80*1 + sanctions_none*1
# Convert log odds to probability
probability <- 1 / (1 + exp(-log_odds))
# Print the estimated probability
print(probability)
# Calculate the log odds for the specific condition: 80 of 192 countries with no sanctions
odds_80 <- intercept + countries_80*1 + sanctions_none*1
# Convert log odds to probability
probability <- 1 / (1 + exp(-odds_80))
# Print the estimated probability
print(probability)
# 2(c)
# Fit model with interaction term
model_interaction <- glm(choice ~ countries + sanctions + countries:sanctions,
data = climateSupport,
family = binomial(link = "logit"))
# Use ANOVA to compare the models
anova_result <- anova(model, model_interaction, test = "LRT")
print(anova_result)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd(getwd())
data <- read.csv("breitbart_2016_sample.csv",
stringsAsFactors=FALSE,
encoding = "utf-8")
library(quanteda)
library(quanteda.textstats)
library(quanteda.textplots)
# generate corpus object
corpus <- corpus(data$content)
# create tokens
tokens <- tokens(corpus,
remove_punct = TRUE,
remove_numbers = TRUE,
remove_symbols = TRUE,
remove_separators = TRUE,
remove_url = TRUE)
# find collocations
collocations <- textstat_collocations(tokens)
# generate and trim dfm
dfm <- dfm(tokens, tolower = TRUE)
dfm <- dfm_select(dfm, pattern = stopwords("en"), selection = "remove")
dfm <- dfm_trim(dfm, min_count = 20)
str(dfm)
# parse dates
library(lubridate)
dfm$date <- data$date
dfm@docvars$date2 <- dmy(dfm@docvars$date)
dfm@docvars$date_month <- floor_date(dfm@docvars$date2, "month")
# attach original text to dfm
dfm@docvars$original_text <- corpus$documents$content
print(dfm)
library(stm)
stmdfm <- convert(dfm, to = "stm") # convert quanteda dfm to stm format (helps with memory)
# fit model
k <- 35
modelFit <- stm(stmdfm$documents, stmdfm$vocab, K = k)
View(data)
library(ggplot2)
# Aggregate topic probability by month
theta_topic <- modelFit$theta[,1]
agg_theta <- aggregate(theta_topic,
by = list(month = dfm@docvars$date_month), # Fill in the
FUN = mean) # Fill in the blank
# Plot aggregated theta over time
ggplot(data = agg_theta,
aes(x = month, y = x, group = 1)) + # Fill in the blanks
geom_line() + # Complete the function name
geom_point() + # Complete the function name
labs(title = "Topic prevalence",
x = "Month",
y = "Average monthly topic probability") +
theme_minimal()
# Calculate topic correlations
topic_correlations <- cor(modelFit$theta)
# Plot correlations
plot(topic_correlations,
vlabels = seq_len(ncol(modelFit$theta)),
vertex.color = "white",
main = "Topic correlations")
library(ggplot2)
SemEx <- as.data.frame(
cbind(
c(1:ncol(modelFit$theta)),
exclusivity(modelFit),
semanticCoherence(model = modelFit,
documents = stmdfm$documents,
M = 15)
)
)
colnames(SemEx) <- c("k", "ex", "coh")
SemExPlot <- ggplot(SemEx, aes(coh, ex)) +
geom_text(aes(label=k)) +
labs(x = "Semantic Coherence",
y = "Exclusivity",
title = "Topic Semantic Coherence vs. Exclusivity") +
geom_rug() +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "gray", size=1))
SemExPlot
install.packages("multcompView")
install.packages("dplyr")
install.packages("ggthemes")
install.packages("ggplot2")
install.packages("multcomp")
install.packages("multcompView")
library(dplyr)
library(ggthemes)
library(ggplot2)
library(multcomp)
library(multcompView)
library(dplyr)
library(ggthemes)
library(ggplot2)
library(multcomp)
library(multcompView)
data
data
data <- iris
tibble(data)
data$Species <- factor(data$Species)
tibble(data)
str(data)
mean_data <- group_by(data, Species) %>%
summarise(petal_width_mean <- mean(Petal.Width), sd <- sd(data$Petal.Width)) %>%
arrange(desc(petal_width_mean))
mean_data <- group_by(data, Species) %>%
summarise(petal_width_mean= mean(Petal.Width), sd = sd(data$Petal.Width)) %>%
arrange(desc(petal_width_mean))
View(mean_data)
# calculate ANOVA
anova <- aov(Petal.Width ~ Species, data = data)
summary(anova)
# another dataset----
install.packages("survival")
library(survival)
data("lung")
data("lung")
View(lung)
df <- survival::lung
View(df)
View(df)
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("nnet", "MASS"),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#####################
# Problem 1
#####################
# load data
gdp_data <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsII_Spring2024/main/datasets/gdpChange.csv", stringsAsFactors = F)
#####################
# Problem 2
#####################
# load data
mexico_elections <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsII_Spring2024/main/datasets/MexicoMuniData.csv")
install.packages("stargazer")
library(stargazer)
View(gdp_data)
# load data
gdp_data <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsII_Spring2024/main/datasets/gdpChange.csv", stringsAsFactors = F)
gdp_data[gdp_data$GDPWdiff == 0, "category"] <- "no change"
gdp_data[gdp_data$GDPWdiff > 0, "category"] <- "positive change"
gdp_data[gdp_data$GDPWdiff < 0, "category"] <- "negative change"
View(gdp_data)
gdp data$category <− relevel(as.factor(gdp_data$category), ref=”no change”)
gdp_data$category <− relevel(as.factor(gdp_data$category), ref=”no change”)
gdp_data$category <- relevel(as.factor(gdp_data$category), ref=”no change”)
gdp_data$category <- relevel(as.factor(gdp_data$category), ref=”no change”)
gdp_data$category <- relevel(as.factor(gdp_data$category), ref="no change")
View(gdp_data)
gdp_data$category <- ifelse(gdp_data$GDPWdiff == 0, "no change",
ifelse(gdp_data$GDPWdiff > 0, "positive change", "negative change"))
View(gdp_data)
# conevrting category variable into a factor, keeping no change as reference level
gdp_data$category <- relevel(as.factor(gdp_data$category), ref="no change")
# load data
gdp_data <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsII_Spring2024/main/datasets/gdpChange.csv", stringsAsFactors = F)
gdp_data$category <- ifelse(gdp_data$GDPWdiff == 0, "no change",
ifelse(gdp_data$GDPWdiff > 0, "positive change", "negative change"))
View(gdp_data)
un_logit <- multinom(category ~ gdp_data$OIL+gdp_data$REG)
un_logit <- multinom(gdp_data$category ~ gdp_data$OIL+gdp_data$REG)
summary(un_logit)
# conevrting category variable into a factor, keeping no change as reference level
gdp_data$category <- relevel(as.factor(gdp_data$category), ref="no change")
un_logit <- multinom(gdp_data$category ~ gdp_data$OIL+gdp_data$REG)
summary(un_logit)
stargazer(un_logit)
# create factor through relevel for increasing order level creation
gdp_data$category <- relevel(gdp_data$category, ref = "negative change")
lapply(c("nnet", "MASS"),  pkgTest)
lapply(c("nnet", "MASS"),  pkgTest)
library(MASS)
# using ordinal variables from the dataset to fit an ordered multinomial logit model
ord_logit <- polr(gdp_data$category ~ gdp_data$OIL+gdp_data$REG)
summary(ord_logit)
View(ord_logit)
View(ord_logit)
# load data
mexico_elections <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsII_Spring2024/main/datasets/MexicoMuniData.csv")
View(mexico_elections)
# Fit Poisson regression model
poisson <- glm(mexico_elections$PAN.visits.06 ~
mexico_elections$marginality.06 +
mexico_elections$PAN.governor.06 +
mexico_elections$competitive.district,
family = poisson)
# Summarize the model
summary(poisson)
# Fit Poisson regression model
poisson <- glm(mexico_elections$PAN.visits.06 ~
mexico_elections$competitive.district +
mexico_elections$marginality.06 +
mexico_elections$PAN.governor.06,
family = poisson)
# Fit Poisson regression model
poisson <- glm(mexico_elections$PAN.visits.06 ~
mexico_elections$competitive.district +
mexico_elections$marginality.06 +
mexico_elections$PAN.governor.06,
family = poisson)
# Fit Poisson regression model
poisson <- glm(mexico_elections$PAN.visits.06 ~
mexico_elections$competitive.district +
mexico_elections$marginality.06 +
mexico_elections$PAN.governor.06,
family = poisson())
# Summarize the model
summary(poisson)
stargazer(poisson)
library(stargazer)
stargazer(poisson)
# Create a new data frame with the specific characteristics
hyp_data <- data.frame(competitive.district = 1, marginality.06 = 0, PAN.governor.06 = 1)
# Predict the mean number of visits for the new data
predicted_mean <- predict(poisson_model, data = hyp_data, type = "response")
# Predict the mean number of visits for the new data
predicted_mean <- predict(poisson, data = hyp_data, type = "response")
# Print the predicted mean
print(predicted_mean)
# Create a new data frame with the specific characteristics
hyp_data <- data.frame(competitive.district = 1, marginality.06 = 0, PAN.governor.06 = 1)
# Predict the mean number of visits for the new data
predicted_mean <- predict(poisson, newdata = hyp_data, type = "response")
# Create a new data frame with the specific characteristics
hyp_data <- data.frame(competitive.district = 1, marginality.06 = 0, PAN.governor.06 = 1)
# Predict the mean number of visits for the new data
predicted_mean <- predict(poisson, newdata = hyp_data, type = "response")
View(hyp_data)
# Create a new data frame with the specific characteristics
hyp_data <- data.frame(competitive.district = 1, marginality.06 = 0, PAN.governor.06 = 1)
# Predict the mean number of visits for the new data
predicted_mean <- predict(poisson, newdata = hyp_data, type = "response")
View(hyp_data)
# Print the predicted mean
print(predicted_mean)
estimated_mean <- sum(predicted_mean)
# print the predicted mean
print(estimated_mean)
estimated_mean <- mean(predicted_mean)
# print the predicted mean
print(estimated_mean)
# predict mean number of visits for hypothetical data
predicted_mean <- predict(poisson, data = hyp_data, type = "response")
estimated_mean <- mean(predicted_mean)
# print the predicted mean
print(estimated_mean)
# create a new data frame with specific characteristics
hyp_data <- data.frame(competitive.district = 1, marginality.06 = 0, PAN.governor.06 = 1)
# predict mean number of visits for hypothetical data
predicted_mean <- predict(poisson, data = hyp_data, type = "response")
estimated_mean <- mean(predicted_mean)
# print the predicted mean
print(estimated_mean)
# load data
gdp_data <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsII_Spring2024/main/datasets/gdpChange.csv", stringsAsFactors = F)
# creating a factor variable
gdp_data$category <- ifelse(gdp_data$GDPWdiff == 0, "no change",
ifelse(gdp_data$GDPWdiff > 0, "positive change", "negative change"))
# conevrting category variable into a factor, keeping "no change" as reference level
gdp_data$category <- relevel(as.factor(gdp_data$category), ref="no change")
# using ordinal variables from the dataset to fit an unordered multinomial logit model
un_logit <- multinom(gdp_data$category ~ gdp_data$OIL+gdp_data$REG)
lapply(c("nnet", "MASS"),  pkgTest)
library(nnet)
# using ordinal variables from the dataset to fit an unordered multinomial logit model
un_logit <- multinom(gdp_data$category ~ gdp_data$OIL+gdp_data$REG)
summary(un_logit)
stargazer(un_logit)
summary <- summary(un_logit)
stargazer(summary)
summary <- summary(un_logit)
stargazer(summary)
summ <- summary(un_logit)
stargazer(summ)
a <- summary(un_logit)
a <- summary(un_logit)
stargazer(a)
summary_stats <- summary(un_logit)
stargazer(summary_stats, type = "text")
summary(un_logit)
stargazer(un_logit, type = "text")
# create a new data frame with specific characteristics
hyp_data <- data.frame(competitive.district = 1,
marginality.06 = 0,
PAN.governor.06 = 1)
# predict mean number of visits for hypothetical data
predicted_mean <- predict(poisson, data = hyp_data, type = "response")
# create factor through relevel for increasing order level creation
gdp_data$category <- relevel(gdp_data$category, ref = "negative change")
# using ordinal variables from the dataset to fit an ordered multinomial logit model
ord_logit <- polr(gdp_data$category ~ gdp_data$OIL+gdp_data$REG)
summary(ord_logit)
stargazer(ord_logit)
# load data
mexico_elections <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsII_Spring2024/main/datasets/MexicoMuniData.csv")
# Fit Poisson regression model
poisson <- glm(mexico_elections$PAN.visits.06 ~
mexico_elections$competitive.district +
mexico_elections$marginality.06 +
mexico_elections$PAN.governor.06,
family = poisson())
# Summarize the model
summary(poisson)
# print the predicted mean
print(estimated_mean)
