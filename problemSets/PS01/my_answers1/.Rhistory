D <- max(abs(empCDF - pnorm(data)))
summ <- NULL
for(a in 1:n){
summ <- c(summ, exp((- (2 * a - 1)^2 * pi^2) / ((8 * D)^2)))
}
pValue <- sqrt(2 * pi) / D * sum(summ)
print("D =", D)
print("p-value =", pValue)
}
print(ks(emp))
set.seed(123)
n <- 1000
emp <- rcauchy(n, location = 0, scale = 1)
ks <- function(data) {
# create empirical distribution of observed data
ECDF <- ecdf(data)
empCDF <- ECDF(data)
# generate test statistic
D <- max(abs(empCDF - pnorm(data)))
summ <- NULL
for(a in 1:n){
summ <- c(summ, exp((- (2 * a - 1)^2 * pi^2) / ((8 * D)^2)))
}
pValue <- sqrt(2 * pi) / D * sum(summ)
print(paste("D =", D))
print(paste("p-value =", pValue))
}
ks(emp)
ks.test(emp, "pnorm")
set.seed(123)
n <- 1000
emp <- rcauchy(n, location = 0, scale = 1)
ks <- function(data) {
# create empirical distribution of observed data
ECDF <- ecdf(data)
empCDF <- ECDF(data)
# generate test statistic
D <- max(abs(empCDF - pnorm(data)))
summ <- NULL
for(a in 1:n){
summ <- c(summ, exp((- (2 * a - 1)^2 * pi^2) / ((8 * D)^2)))
}
pValue <- sqrt(2 * pi) / D * sum(summ)
#print(paste("D =", D))
#print(paste("p-value =", pValue))
}
ks(emp)
set.seed(123)
n <- 1000
emp <- rcauchy(n, location = 0, scale = 1)
ks <- function(data) {
# create empirical distribution of observed data
ECDF <- ecdf(data)
empCDF <- ECDF(data)
# generate test statistic
D <- max(abs(empCDF - pnorm(data)))
summ <- NULL
for(a in 1:n){
summ <- c(summ, exp((- (2 * a - 1)^2 * pi^2) / ((8 * D)^2)))
}
pValue <- sqrt(2 * pi) / D * sum(summ)
#print(paste("D =", D))
#print(paste("p-value =", pValue))
}
ks(emp)
ks.test(emp, "pnorm")
set.seed(123)
n <- 1000
emp <- rcauchy(n, location = 0, scale = 1)
ks <- function(data) {
# create empirical distribution of observed data
ECDF <- ecdf(data)
empCDF <- ECDF(data)
# generate test statistic
D <- max(abs(empCDF - pnorm(data)))
addition <- NULL
for(a in 1:n){
addition <- c(addition, exp((- (2 * a - 1)^2 * pi^2) / ((8 * D)^2)))
}
pValue <- sqrt(2 * pi) / D * sum(addition)
#print(paste("D =", D))
#print(paste("p-value =", pValue))
}
ks(emp)
ks.test(emp, "pnorm")
set.seed(123)
n <- 1000
emp <- rcauchy(n, location = 0, scale = 1)
ks <- function(data) {
# create empirical distribution of observed data
ECDF <- ecdf(data)
empCDF <- ECDF(data)
# generate test statistic
D <- max(abs(empCDF - pnorm(data)))
addition <- NULL
for(a in 1:n){
addition <- c(addition, exp((- (2 * a - 1)^2 * pi^2) / ((8 * D)^2)))
}
pValue <- sqrt(2 * pi) / D * sum(addition)
#print(paste("D =", D))
#print(paste("p-value =", pValue))
}
#ks(emp)
ks.test(emp, "pnorm")
set.seed(123)
n <- 1000
emp <- rcauchy(n, location = 0, scale = 1)
ks <- function(data) {
# create empirical distribution of observed data
ECDF <- ecdf(data)
empCDF <- ECDF(data)
# generate test statistic
D <- max(abs(empCDF - pnorm(data)))
addition <- NULL
for(a in 1:n){
addition <- c(addition, exp((- (2 * a - 1)^2 * pi^2) / ((8 * D)^2)))
}
pValue <- sqrt(2 * pi) / D * sum(addition)
print(paste("D =", D))
print(paste("p-value =", pValue))
}
ks.test(emp, "pnorm")
print(paste("D =", D))
#####################
# Problem 1
#####################
set.seed(123)
n <- 1000
emp <- rcauchy(n, location = 0, scale = 1)
ks <- function(data) {
# create empirical distribution of observed data
ECDF <- ecdf(data)
empCDF <- ECDF(data)
# generate test statistic
D <- max(abs(empCDF - pnorm(data)))
addition <- NULL
for(a in 1:n){
addition <- c(addition, exp((- (2 * a - 1)^2 * pi^2) / ((8 * D)^2)))
}
pValue <- sqrt(2 * pi) / D * sum(addition)
print(paste("D =", D))
print(paste("p-value =", pValue))
}
ks.test(emp, "pnorm")
set.seed(123)
n <- 1000
emp <- rcauchy(n, location = 0, scale = 1)
ks <- function(data) {
# create empirical distribution of observed data
ECDF <- ecdf(data)
empCDF <- ECDF(data)
# generate test statistic
D <- max(abs(empCDF - pnorm(data)))
addition <- NULL
for(a in 1:n){
addition <- c(addition, exp((- (2 * a - 1)^2 * pi^2) / ((8 * D)^2)))
}
pValue <- sqrt(2 * pi) / D * sum(addition)
print(paste("D =", D))
print(paste("p-value =", pValue))
}
set.seed(123)
n <- 1000
emp <- rcauchy(n, location = 0, scale = 1)
ks <- function(data) {
# create empirical distribution of observed data
ECDF <- ecdf(data)
empCDF <- ECDF(data)
# generate test statistic
D <- max(abs(empCDF - pnorm(data)))
addition <- NULL
for(a in 1:n){
addition <- c(addition, exp((- (2 * a - 1)^2 * pi^2) / ((8 * D)^2)))
}
pValue <- sqrt(2 * pi) / D * sum(addition)
print(paste("D =", D))
print(paste("p-value =", pValue))
}
ks(emp)
set.seed(123)
n <- 1000
emp <- rcauchy(n, location = 0, scale = 1)
ks <- function(data) {
# create empirical distribution of observed data
ECDF <- ecdf(data)
empCDF <- ECDF(data)
# generate test statistic
D <- max(abs(empCDF - pnorm(data)))
addition <- NULL
for(a in 1:n){
addition <- c(addition, exp((- (2 * a - 1)^2 * pi^2) / ((8 * D)^2)))
}
pValue <- sqrt(2 * pi) / D * sum(addition)
print(paste("D =", D))
print(paste("p-value =", pValue))
}
ks(emp)
ks.test(emp, "pnorm")
set.seed(123)
n <- 1000
emp <- rcauchy(n, location = 0, scale = 1)
ks <- function(data) {
# create empirical distribution of observed data
ECDF <- ecdf(data)
empCDF <- ECDF(data)
# generate test statistic
D <- max(abs(empCDF - pnorm(data)))
addition <- NULL
for(a in 1:n){
addition <- c(addition, exp((- (2 * a - 1)^2 * pi^2) / ((8 * D)^2)))
}
pValue <- sqrt(2 * pi) / D * sum(addition)
print(paste("D =", D))
print(paste("p-value =", pValue))
}
print(ks(emp))
ks.test(emp, "pnorm")
set.seed(123)
n <- 1000
emp <- rcauchy(n, location = 0, scale = 1)
ks <- function(data) {
# create empirical distribution of observed data
ECDF <- ecdf(data)
empCDF <- ECDF(data)
# generate test statistic
D <- max(abs(empCDF - pnorm(data)))
addition <- NULL
for(a in 1:n){
addition <- c(addition, exp((- (2 * a - 1)^2 * pi^2) / ((8 * D)^2)))
}
p <- sqrt(2 * pi) / D * sum(addition)
print(paste("D =", D))
print(paste("p_value =", p))
}
print(ks(emp))
ks.test(emp, "pnorm")
print(paste(ks(emp)))
print(paste("D =", D)),
print(paste("D =", D))
print(paste("D =", D))
print("D =", D)
print("p_value =", p)
print(paste(ks(emp)))
print(paste("D =", D))
print(paste("p_value =", p))
print(ks(emp))
ks.test(emp, "pnorm")
set.seed(123)
n <- 1000
emp <- rcauchy(n, location = 0, scale = 1)
# create a function to that takes observed data as input
ks <- function(data) {
# create empirical distribution of observed data
ECDF <- ecdf(data)
empiricalCDF <- ECDF(data)
# generate test statistic
D <- max(abs(empiricalCDF - pnorm(data)))
addition <- NULL
for(a in 1:n){
addition <- c(addition, exp((- (2 * a - 1)^2 * pi^2) / ((8 * D)^2)))
}
p <- sqrt(2 * pi) / D * sum(addition)
print(paste("D =", D))
print(paste("p_value =", p))
}
print(ks(emp))
ks.test(emp, "pnorm")
set.seed(123)
n <- 1000
emp <- rcauchy(n, location = 0, scale = 1)
# create a function that takes observed data as input
ks <- function(data) {
# create empirical distribution of observed data
ECDF <- ecdf(data)
empiricalCDF <- ECDF(data)
# generate test statistic
D <- max(abs(empiricalCDF - pnorm(data)))
addition <- 0
for(a in 1:n){
addition <- c(addition, exp((- (2 * a - 1)^2 * pi^2) / ((8 * D)^2)))
}
p <- sqrt(2 * pi) / D * sum(addition)
print(paste("D =", D))
print(paste("p_value =", p))
}
print(ks(emp))
ks.test(emp, "pnorm")
set.seed(123)
n <- 1000
emp <- rcauchy(n, location = 0, scale = 1)
ks.test(emp, "pnorm")
set.seed(123)
n <- 1000
emp <- rcauchy(n, location = 0, scale = 1)
# create a function that takes observed data as input
ks <- function(data) {
# create empirical distribution of observed data
ECDF <- ecdf(data)
empiricalCDF <- ECDF(data)
# generate test statistic
D <- max(abs(empiricalCDF - pnorm(data)))
addition <- 0
for(a in 1:n){
addition <- c(addition, exp((- (2 * a - 1)^2 * pi^2) / ((8 * D)^2)))
}
p <- sqrt(2 * pi) / D * sum(addition)
print(paste("D =", D))
print(paste("p_value =", p))
}
print(ks(emp))
ks.test(emp, "pnorm")
set.seed (123)
data <- data.frame(x = runif(200, 1, 10))
data$y <- 0 + 2.75*data$x + rnorm(200, 0, 1.5)
# Log-likelihood function for OLS regression
log_likelihood_ols <- function(beta, x, y) {
y_pred <- beta[1] + beta[2] * x
residuals <- y - y_pred
log_likelihood_values <- dnorm(residuals, mean = 0, sd = 1.5, log = TRUE)
return(-sum(log_likelihood_values))
}
# Use BFGS optimization to estimate OLS coefficients
initial_guess <- c(0, 1)  # Initial guess for coefficients
result <- optim(par = initial_guess, log_likelihood_ols, x = data$x, y = data$y, method = "BFGS")
# Extract estimated coefficients
ols_coef_log_likelihood <- result$par
# Print results
cat("OLS Coefficients using Log-Likelihood (BFGS optimization):\n")
cat("Intercept:", ols_coef_log_likelihood[1], "\n")
cat("Slope:", ols_coef_log_likelihood[2], "\n")
# Compare with lm function
lm_result <- lm(y ~ x, data = data)
# Extract lm coefficients
ols_coef_lm <- coef(lm_result)
# Print results
cat("\nOLS Coefficients using lm function:\n")
cat("Intercept:", ols_coef_lm[1], "\n")
cat("Slope:", ols_coef_lm[2], "\n")
set.seed (123)
data <- data.frame(x = runif(200, 1, 10))
data$y <- 0 + 2.75*data$x + rnorm(200, 0, 1.5)
# Log-likelihood function for OLS regression
log_likelihood_ols <- function(beta, x, y) {
y_pred <- beta[1] + beta[2] * x
residuals <- y - y_pred
log_likelihood_values <- dnorm(residuals, mean = 0, sd = 1.5, log = TRUE)
return(-sum(log_likelihood_values))
}
# Use BFGS optimization to estimate OLS coefficients
initial_guess <- c(0, 1)  # Initial guess for coefficients
result <- optim(par = initial_guess, log_likelihood_ols, x = data$x, y = data$y, method = "BFGS")
# Extract estimated coefficients
ols_coef_log_likelihood <- result$par
# Print results
print("OLS Coefficients using Log-Likelihood (BFGS optimization):\n")
print("Intercept:", ols_coef_log_likelihood[1], "\n")
set.seed (123)
data <- data.frame(x = runif(200, 1, 10))
data$y <- 0 + 2.75*data$x + rnorm(200, 0, 1.5)
# Log-likelihood function for OLS regression
log_likelihood_ols <- function(beta, x, y) {
y_pred <- beta[1] + beta[2] * x
residuals <- y - y_pred
log_likelihood_values <- dnorm(residuals, mean = 0, sd = 1.5, log = TRUE)
return(-sum(log_likelihood_values))
}
# Use BFGS optimization to estimate OLS coefficients
initial_guess <- c(0, 1)  # Initial guess for coefficients
result <- optim(par = initial_guess, log_likelihood_ols, x = data$x, y = data$y, method = "BFGS")
# Extract estimated coefficients
ols_coef_log_likelihood <- result$par
# Print results
print(paste("OLS Coefficients using Log-Likelihood (BFGS optimization):\n"))
print(paste("Intercept:", ols_coef_log_likelihood[1], "\n"))
print(paste("Slope:", ols_coef_log_likelihood[2], "\n"))
# Compare with lm function
lm_result <- lm(y ~ x, data = data)
# Extract lm coefficients
ols_coef_lm <- coef(lm_result)
# Print results
cat("\nOLS Coefficients using lm function:\n")
cat("Intercept:", ols_coef_lm[1], "\n")
cat("Slope:", ols_coef_lm[2], "\n")
set.seed (123)
data <- data.frame(x = runif(200, 1, 10))
data$y <- 0 + 2.75*data$x + rnorm(200, 0, 1.5)
# Log-likelihood function for OLS regression
log_likelihood_ols <- function(beta, x, y) {
y_pred <- beta[1] + beta[2] * x
residuals <- y - y_pred
log_likelihood_values <- dnorm(residuals, mean = 0, sd = 1.5, log = TRUE)
return(-sum(log_likelihood_values))
}
# Use BFGS optimization to estimate OLS coefficients
initial_guess <- c(0, 1)  # Initial guess for coefficients
result <- optim(par = initial_guess, log_likelihood_ols, x = data$x, y = data$y, method = "BFGS")
# Extract estimated coefficients
ols_coef_log_likelihood <- result$par
# Print results
print(paste("OLS Coefficients using Log-Likelihood (BFGS optimization):\n"))
print(paste("Intercept:", ols_coef_log_likelihood[1], "\n"))
print(paste("Slope:", ols_coef_log_likelihood[2], "\n"))
# Compare with lm function
lm_result <- lm(y ~ x, data = data)
# Extract lm coefficients
ols_coef_lm <- coef(lm_result)
# Print results
print(paste("\nOLS Coefficients using lm function:\n"))
print(paste("Intercept:", ols_coef_lm[1], "\n"))
print(paste("Slope:", ols_coef_lm[2], "\n"))
set.seed (123)
data <- data.frame(x = runif(200, 1, 10))
data$y <- 0 + 2.75*data$x + rnorm(200, 0, 1.5)
# Log-likelihood function for OLS regression
log_likelihood_ols <- function(beta, x, y) {
y_pred <- beta[1] + beta[2] * x
residuals <- y - y_pred
log_likelihood_values <- dnorm(residuals, mean = 0, sd = 1.5, log = TRUE)
return(-sum(log_likelihood_values))
}
# Use BFGS optimization to estimate OLS coefficients
initial_guess <- c(0, 1)  # Initial guess for coefficients
result <- optim(par = initial_guess, log_likelihood_ols, x = data$x, y = data$y, method = "BFGS")
# Extract estimated coefficients
ols_coef_log_likelihood <- result$par
# Print results
print(paste("OLS Coefficients using Log-Likelihood (BFGS optimization):\n"))
print(paste("Intercept:", ols_coef_log_likelihood[1]))
print(paste("Slope:", ols_coef_log_likelihood[2]))
# Compare with lm function
lm_result <- lm(y ~ x, data = data)
# Extract lm coefficients
ols_coef_lm <- coef(lm_result)
# Print results
print(paste("\nOLS Coefficients using lm function:"))
print(paste("Intercept:", ols_coef_lm[1]))
print(paste("Slope:", ols_coef_lm[2]))
set.seed (123)
data <- data.frame(x = runif(200, 1, 10))
data$y <- 0 + 2.75*data$x + rnorm(200, 0, 1.5)
# Log-likelihood function for OLS regression
log_likelihood_ols <- function(beta, x, y) {
y_pred <- beta[1] + beta[2] * x
residuals <- y - y_pred
log_likelihood_values <- dnorm(residuals, mean = 0, sd = 1.5, log = TRUE)
return(-sum(log_likelihood_values))
}
# Use BFGS optimization to estimate OLS coefficients
initial_guess <- c(0, 1)  # Initial guess for coefficients
result <- optim(par = initial_guess, log_likelihood_ols, x = data$x, y = data$y, method = "BFGS")
# Extract estimated coefficients
ols_coef_log_likelihood <- result$par
# Print results
print(paste("Intercept:", ols_coef_log_likelihood[1]))
print(paste("Slope:", ols_coef_log_likelihood[2]))
# Compare with lm function
lm_result <- lm(y ~ x, data = data)
# Extract lm coefficients
ols_coef_lm <- coef(lm_result)
# Print results
print(paste("Intercept:", ols_coef_lm[1]))
print(paste("Slope:", ols_coef_lm[2]))
set.seed (123)
data <- data.frame(x = runif(200, 1, 10))
data$y <- 0 + 2.75*data$x + rnorm(200, 0, 1.5)
# Log-likelihood function for OLS regression
log_lkhd_ols <- function(beta, x, y) {
y_pred <- beta[1] + beta[2] * x
residuals <- y - y_pred
log_lkhd_values <- dnorm(residuals, mean = 0, sd = 1.5, log = TRUE)
return(-sum(log_lkhd_values))
}
# Use BFGS optimization to estimate OLS coefficients
initial_guess <- c(0, 1)  # Initial guess for coefficients
result <- optim(par = initial_guess, log_lkhd_ols, x = data$x, y = data$y, method = "BFGS")
# Extract estimated coefficients
ols_coef_log_lkhd <- result$par
# Print results
print(paste("Intercept:", ols_coef_log_lkhd[1]))
print(paste("Slope:", ols_coef_log_lkhd[2]))
# Compare with lm function
lm_result <- lm(y ~ x, data = data)
# Extract lm coefficients
ols_coef_lm <- coef(lm_result)
# Print results
print(paste("Intercept:", ols_coef_lm[1]))
print(paste("Slope:", ols_coef_lm[2]))
set.seed (123)
data <- data.frame(x = runif(200, 1, 10))
data$y <- 0 + 2.75*data$x + rnorm(200, 0, 1.5)
# Log-likelihood function for OLS regression
log_lkhd_ols <- function(beta, x, y) {
y_pred <- beta[1] + beta[2] * x
residuals <- y - y_pred
log_lkhd_values <- dnorm(residuals, mean = 0, sd = 1.5, log = TRUE)
return(-sum(log_lkhd_values))
}
# Use BFGS optimization to estimate OLS coefficients
initial <- c(0, 1)
result <- optim(par = initial, log_lkhd_ols, x = data$x, y = data$y, method = "BFGS")
# Extract estimated coefficients
ols_coef_log_lkhd <- result$par
# Print results
print(paste("Intercept:", ols_coef_log_lkhd[1]))
print(paste("Slope:", ols_coef_log_lkhd[2]))
# Compare with lm function
lm_result <- lm(y ~ x, data = data)
# Extract lm coefficients
ols_coef_lm <- coef(lm_result)
# Print results
print(paste("Intercept:", ols_coef_lm[1]))
print(paste("Slope:", ols_coef_lm[2]))
